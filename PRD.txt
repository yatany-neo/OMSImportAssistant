我想开发一个 web app，实现的功能是：
1. 允许用户上传一个csv文件，上传完成后，自动对上传的问题件格式进行检查，文件必须包含的列名(大小写要与要求一致)为
1) entitytype
2) Id
3) customerId
4) MediaPlanId
5) PRODUCTID
6) Name
7) Description
8) StartDate
9) EndDate
10) Cpm
11) Cpd
12) TargetImpressions
13) TargetSpend
14) IsReserved
15) LineType
16) BudgetScheduleType
17) Targets
18) LineId
19) TargetType
20) Ids
21) IsExcluded
22) AudienceTargetingType
23) DeviceTypes

如果文件格式不符合要求，则提醒用户上传的文件不符合要求，并终止后续步骤。

2. 完成格式检查后，对于所加载的数据，将 entitytype = "Line" 的行提取出来，保存为临时文件 lines_temp。将 entitytype = "LineTarget" 的行提取出来，保存为临时数据 lines_target_temp。

3. 然后，在UI上展现 lines_temp 的数据，包括列名。在这一步，表格需要展示如下特定的列，即使某些字段为空也要显示出来。当数据较多时，可以翻页。并且允许用户 filter 数据，来展示某些特定数据行。
1) entitytype
2) Id
3) customerId
4) MediaPlanId
5) PRODUCTID
6) Name
7) Description
8) StartDate
9) EndDate
10) Cpm
11) Cpd
12) TargetImpressions
13) TargetSpend
14) IsReserved
15) LineType
16) BudgetScheduleType

4. 让用户选择他需要对哪些 rows 进行操作，可以多选 multiple rows，选择完成后，点击下一步，同时系统将用户选择的结果存储为临时数据 post_selection。

5. 接下来，用户可以从 3个 action options 中选择1个
1) 用户选择 I want to clone these line times in the media plan。
a. 那么在选择后，在一个新页面展示出用户所挑选的这些数据 post_selection。在该页面上，仅展示以下列：

1) entitytype
2) Id
3) customerId
4) MediaPlanId
5) PRODUCTID
6) Name
7) Description
8) StartDate
9) EndDate
10) Cpm
11) Cpd
12) TargetImpressions
13) TargetSpend
14) IsReserved
15) LineType
16) BudgetScheduleType

在该页面上，用户不允许更改 Id, entitytype，customerId, MediaPlanId, PRODUCTID，其余列可以进行修改。需要注意 StartDate, EndDate 需要显示日期和时间戳，精确到秒，与源数据一致。

b. 当用户完成修改后，自动保存用户修改后的数据为 post_selection_complete_edit，点击下一步。

c. 接下来，需要做一些额外的数据处理。
c-1: 首先，从 lines_target_temp 中选择那些 LineId 的值与 post_selection_complete_edit 的 Id 值相同的行，将挑选出的数据存储为临时数据 lines_target_temp_select。 
c-2: 接下来，将 lines_target_temp_select 数据 append 到 post_selection_complete_edit 的结尾，将2份数据合并，合并后的数据存储为 lines_merged_select。
c-3: 然后，设置一个临时变量 max_negative_value 为 -1，设置另一个临时变量 max_negative_value_2 为 -1。
c-4: 遍历 lines_merged_select 中 entitytype = "Line" 的行，找到每一行的 Id 值，然后继续在 lines_merged_select 数据中遍历 entitytype = "LineTarget" 的行，找到 LineId 与该 Id 值相同的行 （可能有多行）。
c-5: 将此次遍历到的 entitytype="Line" 的数据行与找到的 entitytype = "LineTarget" 的数据行放在一起，作为一个 data set 准备更新。
在这个 data set 中:
1: 修改 entitytype = "Line" 的 数据行的 Id 值，为一个小于 max_negative_value 的最大负整数。比如当 max_negative_value = -1 时，则修改 Id 为 -2，同时重置 max_negative_value 为 -2。
2: 逐一修改 entitytype = "LineTarget" 的数据行的 Id 值，为一个小于 max_negative_value_2 的最大负整数。每次修改一个 Id 值，则重置一次 max_negative_value_2 为当前值减1。
3: 修改 entitytype = "LineTarget" 的所有数据行的 LineId 的值为置为重置后的 max_negative_value。

即:
Line的Id：每个Line分配一个唯一的负数Id（如-1、-2、-3...）。
LineTarget的Id：每个LineTarget分配一个唯一的负数Id（如-1、-2、-3...，与Line的Id序列独立）。
LineTarget的LineId：全部指向其对应Line的新负数Id。
LineTarget的Id：绝不能与Line的Id重复，且每个LineTarget都唯一。
例子:
假设有2个Line（Id=11,12），各自有2个LineTarget：
Line 11 → 新Id -1
LineTarget 1 → 新Id -1（LineId=-1）
LineTarget 2 → 新Id -2（LineId=-1）
Line 12 → 新Id -2
LineTarget 3 → 新Id -3（LineId=-2）
LineTarget 4 → 新Id -4（LineId=-2）

c-6：处理完所有的数据后，将处理后的结果保存为临时数据 lines_merged_select_update_complete。

d. 有一页让用户 review 更新后的数据 lines_merged_select_update_complete，如果用户对有些数据不满意，可以回退到上一步重新修改。用户review后，可以点击 next 到下一步，准备导出数据。在这一页，无需展示 entitytype = "LineTarget"的数据行。
e. 将 lines_merged_select_update_complete 导出为新的 csv 文件，命名为 ready_for_import.csv。文件导出后，给用户一个提示，告诉其请回到 OMS 系统的对应的 media plan 页面将该 csv 文件 import。



2) 用户选择 I want to copy these line items into a new media plan。
a. 那么在选择后，首先让用户输入 target media plan id where the lines will be copied to，用户完成输入后，用户选择下一步，同时系统记录下该 media plan id 值为 target_media_plan_id。

b. 在一个新页面展示出用户所挑选的这些数据 post_selection。在该页面上，仅展示以下列：
1) entitytype
2) Id
3) customerId
4) MediaPlanId
5) PRODUCTID
6) Name
7) Description
8) StartDate
9) EndDate
10) Cpm
11) Cpd
12) TargetImpressions
13) TargetSpend
14) IsReserved
15) LineType
16) BudgetScheduleType

在该页面上，用户不允许更改 Id, entitytype，customerId, MediaPlanId, PRODUCTID，其余列可以进行修改。需要注意 StartDate, EndDate 需要显示日期和时间戳，精确到秒，与源数据一致。

c. 当用户完成修改后，自动保存用户修改后的数据为 post_selection_complete_edit，点击下一步。

d. 接下来，需要做一些额外的数据处理。
d-1: 首先，从 lines_target_temp 中选择那些 LineId 的值与 post_selection_complete_edit 的 Id 值相同的行，将挑选出的数据存储为临时数据 lines_target_temp_select。 
d-2: 接下来，将 lines_target_temp_select 数据 append 到 post_selection_complete_edit 的结尾，将2份数据合并，合并后的数据存储为 lines_merged_select。
d-3: 然后，设置一个临时变量 max_negative_value 为 -1，设置另一个临时变量 max_negative_value_2 为 -1。
d-4: 遍历 lines_merged_select 中 entitytype = "Line" 的行，找到每一行的 Id 值，然后继续在 lines_merged_select 数据中遍历 entitytype = "LineTarget" 的行，找到 LineId 与该 Id 值相同的行 （可能有多行）。
d-5: 将此次遍历到的 entitytype="Line" 的数据行与找到的 entitytype = "LineTarget" 的数据行放在一起，作为一个 data set 准备更新。
在这个 data set 中:
1: 修改 entitytype = "Line" 的 数据行的 Id 值，为一个小于 max_negative_value 的最大负整数。比如当 max_negative_value = -1 时，则修改 Id 为 -2，同时重置 max_negative_value 为 -2。
2: 逐一修改 entitytype = "LineTarget" 的数据行的 Id 值，为一个小于 max_negative_value_2 的最大负整数。每次修改一个 Id 值，则重置一次 max_negative_value_2 为当前值减1。
3: 修改 entitytype = "LineTarget" 的所有数据行的 LineId 的值为置为重置后的 max_negative_value。

即:
Line的Id：每个Line分配一个唯一的负数Id（如-1、-2、-3...）。
LineTarget的Id：每个LineTarget分配一个唯一的负数Id（如-1、-2、-3...，与Line的Id序列独立）。
LineTarget的LineId：全部指向其对应Line的新负数Id。
LineTarget的Id：绝不能与Line的Id重复，且每个LineTarget都唯一。
例子:
假设有2个Line（Id=11,12），各自有2个LineTarget：
Line 11 → 新Id -1
LineTarget 1 → 新Id -1（LineId=-1）
LineTarget 2 → 新Id -2（LineId=-1）
Line 12 → 新Id -2
LineTarget 3 → 新Id -3（LineId=-2）
LineTarget 4 → 新Id -4（LineId=-2）

d-6：处理完所有的数据后，将处理后的结果保存为临时数据 lines_merged_select_update_complete。此时, 数据中的 MediaPlanId 已经被更新为 target_media_plan_id。

e. 有一页让用户 review 更新后的数据 lines_merged_select_update_complete，如果用户对有些数据不满意，可以回退到上一步重新修改。用户review后，可以点击 next 到下一步，准备导出数据。在这一页上所展示的数据中, MediaPlanId 已经被更新为 target_media_plan_id。在这一页，无需展示 entitytype = "LineTarget"的数据行。

f. 将 lines_merged_select_update_complete 导出为新的 csv 文件，命名为 ready_for_import.csv。文件导出后，给用户一个提示，告诉其请回到 OMS 系统的对应的 media plan 页面将该 csv 文件 import。



3) 用户选择 I want to edit these line items。
a. 那么在选择后，在一个新页面展示出用户所挑选的这些数据 post_selection。在该页面上，仅展示以下列：

1) entitytype
2) Id
3) customerId
4) MediaPlanId
5) PRODUCTID
6) Name
7) Description
8) StartDate
9) EndDate
10) Cpm
11) Cpd
12) TargetImpressions
13) TargetSpend
14) IsReserved
15) LineType
16) BudgetScheduleType

在该页面上，用户不允许更改 Id, entitytype，customerId, MediaPlanId, PRODUCTID，其余列可以进行修改。需要注意 StartDate, EndDate 需要显示日期和时间戳，精确到秒，与源数据一致。

b. 当用户完成修改后，自动保存用户修改后的数据为 post_selection_complete_edit，点击下一步。

c. 接下来，将 lines_target_temp_select 数据 append 到 post_selection_complete_edit 的结尾，将2份数据合并，合并后的数据存储为临时数据 lines_merged_select_update_complete。

d. 有一页让用户 review 更新后的数据 lines_merged_select_update_complete，如果用户对有些数据不满意，可以回退到上一步重新修改。用户review后，可以点击 next 到下一步，准备导出数据。在这一页，无需展示 entitytype = "LineTarget"的数据行。

e. 将 lines_merged_select_update_complete 导出为新的 csv 文件，命名为 ready_for_import.csv。文件导出后，给用户一个提示，告诉其请回到 OMS 系统的对应的 media plan 页面将该 csv 文件 import。此外，提醒用户原有的 line items 的数据将会被新数据覆盖，请告知其无比仔细检查确保修改正确。



开发要求：
1. 需要简洁、清晰的UI，让用户清楚整体步骤，以及当前在哪一步，下一步是什么。
2. 自动化地解决依赖问题
3. 自动为我修复问题，无需询问。
4. 技术架构简单，方便部署到 Azure server。
5. 单独为该项目处理依赖 dependency，和各种 package dependency。尤其注意版本的兼容性。
6. 正确处理空值数据，保证所有空值都能被正确序列化为JSON。
7. 自动实现日期标准化逻辑：
1) 如果 StartDate/EndDate 只有日期没有时间，StartDate 自动补全为 00:00:00，EndDate 自动补全为 23:59:59。
2) 如果原本就有时间，则保持原样。
3）支持“无秒”的时间格式（如 6/1/2025 22:00），会自动补全为 6/1/2025 22:00:00，保证 startdate/enddate 都能正常显示。
8. 注意数据格式的一致性，特别是浮点、小数、整数、字符类型的数据，在从 csv 文件读取后，正确处理为一致的数据类型。
9. 使用 redis 来缓存临时文件


谢谢，我的需求是:
1. 使用该文件作为上传文件的标准格式
2. 使用该文件的字段来校验上传文件，不符合格式需求的文件将被拒绝上传
3. 注意处理好数字、字符格式的字段，文件上传后做好必要的格式统一，保证程序兼容性和稳定性
4. 注意处理空白字段，即使空白也要正确显示
5. 文件上传后，只将 EntityTye=Line 的行提取出来，保存为临时数据 lines_temp。由于新的文件格式的变化，只会生成这1个临时数据，不在有 lines_target_temp 等之前用来存放 target 相关的临时数据，因此也不再需要对临时数据做 merge 操作。用户所有的操作都只在这份临时数据上先选择相应的数据行，然后进行相应的clone, copy 或者 edit 操作。
6. 在所有页面不显示以下字段:
1). LindId
2). LineName
3). LineStatus
4). Targets
7. 当用户选择 clone line items within the media plan 时，在 edit page 用户无法修改以下字段:
1). EntityTye
2). Id
3). Customer Id
4). Customer Name
5). MediaPlanId
6). MediaPlanName
7). OpportunityId
8). MediaPlanStatus
9). PublisherId
10). PublisherName
11). ProductId
12). ProductName
13). ProductType
8. 当用户选择 I want to copy these line items to a new media plan 时, 
需要向用户询问，并让用户输入两个变量值，作为目标 media plan 的paramters
1) MediaPlanId
2) OpportunityId
此外，在 edit page 不显示以下字段:
1). MediaPlanName
同时，在 edit page，用户无法修改以下字段:
1). EntityTye
2). Id
3). Customer Id
4). Customer Name
5). MediaPlanId
6). OpportunityId
7). MediaPlanStatus
8). PublisherId
9). PublisherName
10). ProductId
11). ProductName
12). ProductType
9. 当用户选择 I want to edit the line items 时，在 edit page 用户无法修改以下字段:
1). EntityTye
2). Id
3). Customer Id
4). Customer Name
5). MediaPlanId
6). MediaPlanName
7). OpportunityId
8). MediaPlanStatus
9). PublisherId
10). PublisherName
11). ProductId
12). ProductName
13). ProductType
10. 目前应用程序中的流程、字段过滤机制、字段排序、字段过多导致的显示宽度超出浏览器宽度的自适应机制、UI风格、在相应的用户流程下的 Id 负值的生成与处理、数据导出的逻辑保持不变
11. 继续使用 redis 缓存临时数据
12. 请使用最佳实践完成各个前端、后端的代码开发


本地测试命令
后端：uvicorn main:app --reload
前端：npm start
npm run build
wsl 启动 redis: 
在 WSL ubuntu 中启动 redis:  sudo service redis-server start
验证 redis-cli ping